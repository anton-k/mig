name:                mig-server
version:             0.1.0.1
github:              "anton-k/mig"
license:             BSD3
author:              "Anton Kholomiov"
maintainer:          "anton.kholomiov@gmail.com"
copyright:           "2023 Anton Kholomiov"
license-file:        LICENSE

extra-source-files:
- README.md

# Metadata used when publishing your package
category:            Web
synopsis:            Build lightweight and composable servers

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description: |
  With library mig we can build lightweight and composable servers.
  There are only couple of combinators to assemble servers from parts.
  It supports generic handler functions as servant does. But strives to use more
  simple model for API. It does not go to describing Server API at type level which
  leads to simpler error messages.
  .
  The main features are:
  .
  * lightweight library
  .
  * expressive DSL to compose servers
  .
  * type-safe handlers
  .
  * handlers are encoded with generic haskell functions
  .
  * built on top of WAI and warp server libraries.
  .
  Example of hello world server:
  .
  > import Mig.Json.IO
  >
  > -- | We can render the server and run it on port 8085.
  > -- It uses wai and warp.
  > main :: IO ()
  > main = runServer 8085 server
  >
  > -- | Init simple hello world server whith two routes:
  > server :: Server IO
  > server =
  >   "api/v1" /.
  >       [ "hello" /. hello
  >       , "bye" /. bye
  >       ]
  >
  > -- | Handler takes no inputs and marked as Get HTTP-request that returns Text.
  > hello :: Get (Resp Text)
  > hello = pure $ ok "Hello World"
  >
  > -- | Handle with URL-param query and json body input as Post HTTP-request that returns Text.
  > bye :: Query "name" Text -> Body Text -> Post (Resp Text)
  > bye (Query name) (Body greeting) =
  >   pure $ ok $ "Bye to " <> name <> " " <> greeting
  .
  Please see:
  .
  * quick start guide at <https://anton-k.github.io/mig/>
  .
  * examples directory for more fun servers: at <https://github.com/anton-k/mig/tree/main/examples/mig-example-apps#readme>
  .
  * reference for the main functions: <https://anton-k.github.io/mig/09-reference.html>

language: GHC2021

default-extensions:
  - DerivingStrategies
  - DuplicateRecordFields
  - LambdaCase
  - OverloadedRecordDot
  - OverloadedStrings
  - StrictData
  - TypeFamilies

dependencies:
- aeson
- base >= 4.7 && < 5
- mig >= 0.2.0.1
- mig-extra >= 0.1.0.1
- mig-wai >= 0.1.0.1
- http-types
- text
- http-api-data
- openapi3
- blaze-html
- warp
- mig-swagger-ui >= 0.1
- data-default
- transformers

ghc-options:
- -Wall
- -Wcompat
- -Widentities
- -Wincomplete-record-updates
- -Wincomplete-uni-patterns
- -Wmissing-export-lists
- -Wmissing-home-modules
- -Wpartial-fields
- -Wredundant-constraints
- -Wunused-packages

library:
  source-dirs: src
